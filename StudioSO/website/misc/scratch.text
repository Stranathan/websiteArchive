var mouseEffectFS = `#version 300 es

precision highp float;

out vec4 fragColor;

uniform float time;
uniform vec2 resolution;
uniform vec2 mousePositions[20];

float circle(vec2 uv, vec3 circlePosAndRadius)
{
    return (1. - smoothstep(circlePosAndRadius.z, circlePosAndRadius.z + 0.005, length(uv - circlePosAndRadius.xy)));
}
vec3 when_gt(vec3 x, vec3 y) 
{
    return max(sign(x - y), 0.0);
}
vec3 when_lt(vec3 x, vec3 y) 
{
    return max(sign(y - x), 0.0);
  }
void main()
{
    vec2 uv = 2. * ( gl_FragCoord.xy -.5 * resolution.xy ) / resolution.y;

    float mouseEffect = 0.; 
    for(int i = 0; i < 20; i++)
    {
        mouseEffect += circle(uv, vec3(mousePositions[i], float(i) * 0.04 / 20.));
    }
    vec3 col = vec3(1. - clamp(mouseEffect, 0., 1.));
    vec4 colAndAlpha = vec4(col, when_lt(col, vec3(0.95)));
    fragColor = colAndAlpha; //vec4(col,1.0);
}
`

#--

void main()
{
    vec2 uv = 2. * ( gl_FragCoord.xy -.5 * resolution.xy ) / resolution.y;
    float mouseEffect = 0.;
    float baseRadius = 0.04;
    float distFieldContraction = 8.; // [4, 10] :: [i = 20, i = 1]
    float val = distFieldContraction * length(uv - mousePositions[0]);
    float nextVal;
    float interpolationVar;
    for(int i = 1; i < 20; i++)
    {
        interpolationVar = float(i) / 20.; // could do something fancier with easing function
        distFieldContraction = mix(8., 4., interpolationVar);
        nextVal = distFieldContraction * length(uv - mousePositions[i]);
        val = smin(val, nextVal, 0.7); 
    }
    vec3 col = vec3(smoothstep(baseRadius, baseRadius + 0.02, val));
    
    fragColor = vec4(col, when_lt(col, vec3(0.95)));
}
`

---------------------------------------

Saving original inverted shader:

void main()
{
    vec2 uv = gl_FragCoord.xy / resolution;
    //
    vec2 uvMouse = uv;
    uvMouse.x *= resolution.x / resolution.y;
    vec2 mousePos = vec2(mouse.x / resolution.x, 1. - (mouse.y / resolution.y));
    mousePos.x *= resolution.x / resolution.y;

    // -------------------
    float len = length(uvMouse - mousePos);
    float circleMask = smoothstep(0.15, 0.15, len);
    
    vec3 invertedTex = (vec3(1.) - texture(tex, uv).xyz) * (1. - circleMask);
    vec3 texSample = texture(tex, uv).xyz * circleMask;
    vec3 col = texSample + invertedTex;

    fragColor = vec4(col, 1.);
}
`
---------------------------------------